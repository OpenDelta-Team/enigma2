Proposal for Standardised and Uniform Setup Menus in Enigma2
------------------------------------------------------------

Written by IanSav - 2-Apr-2018
Updated by IanSav - 6-Apr-2018

INTRODUCTION:
=============

Enigma2 is a massive open source project that has many contributors and 
add-ons.  Over time a number of alternative approaches to performing common 
tasks have evolved.  This document proposes some conventions that can be 
adopted by all developers, contributors and skin authors to ensure that 
everyone can work independently but still achieve results that work together 
interchangeably.

Standard variable names are proposed, together with code and skin coding 
conventions to assist in creating code that works more universally, with 
additional benefits from improved Setup menu load performance and reduction 
in merge issues between images.

Lastly, the document explains the proposed operation and features of the 
refactored Setup menu interface ("Screen/Setup.py").

REFACTOR OF "Screens/Setup.py":
===============================

The refactor of the "Screens/Setup.py" code has been based on the OpenPLi, 
OpenViX and Beyonwiz builds.  Features have been drawn from all the builds 
and the code has been rewritten to be compatible with all three builds 
without needing any modifications.  That is, the proposed code has been 
written to make the "Screens/Setup.py" a superset of all builds and to 
operate, without modification, on OpenPLi, OpenViX and Beyonwiz builds 
of Enigma2.  This should allow the same code to be used in all builds to 
eliminate or at least reduce merge issues.

The changes, even with the enhancements, result in up to a four-fold 
reduction in time to generate any "Screens/Setup.py" based Setup menu on 
OpenViX and Beyonwiz builds.  The time taken to build any Setup menu lists 
is slightly longer for the first menu item but then about 50 time faster 
for all subsequent searches.  (The menu feature is not used on Beyonwiz 
builds.)

Significant changes, in no particular order, are:

1)	All setup XML file data is cached into memory on the first access.  
	Every subsequent access will check if the source file has been 
	changed.  If so, the file will be reloaded and reprocessed.  If not, 
	the cached results are returned.  This change significantly improves 
	"Screens/Setup.py" menu load times.

	This change also means that the GUI no longer has to be restarted to 
	allow changes to "setup.xml" to be processed by OpenPLi.

2)	All setup menu titles are also extracted and cached to improve menu 
	building time.  This code uses a derivative of the OpenViX 
	"titleshort" attribute here known as "menuTitle" to allow 
	"Screens/Menu.py" based menus to have alternate title text.  This 
	change improves "Screens/Menu.py" menu load times for "Setup" based 
	menus.

3)	Optimise, improve and enhance generation of Setup menu item lists.  
	For OpenViX and Beyonwiz this change allows the list to be processed 
	once for display rather than the two or three cycles in the previous 
	versions.

4)	Create a log entry if the Setup menu has no valid entries.

5)	Remove remnants of the setup.xml "separation" attribute directive.  
	This feature is now offered via the skin parameter 
	"ConfigListSeperator".

6)	Where implemented, obey Setup menu sort setting.

7)	If "%s %s" is found in an item's "text" or "description" attribute 
	then replace it with the current box machine brand and model name.

8)	Move the description code from the "SetupSummary" class into the main 
	"Setup" class where it is used.

9) 	Add Beyonwiz and OpenViX footnote support code.  If the last 
	character of a menu item is an "*" then when this item 	is currently 
	selected by the user a footnote message will appear to 	advise the 
	user that a restart will be required if this item is changed.

10)	Add OpenViX menu path code to display the menu path to the current 
	menu.

11)	Add an option to provide "Setup" menu images based on matching the 
	setup menu "key" attribute with an image defined in a new "<setups>" 
	block in the skin.  This code is conditional on having compatible 
	changes in "skin.py".

12)	Enable the HELP button to allow users to obtain help while using any 
	"Screens/Setup.py" based screen.  To be fully operational these 
	changes also need to be accompanied by changes to 
	"Components/ConfigList.py".

	To properly implement HELP and clean up the ActionMaps, the ActionMap 
	and associated code should be removed from "Screens/Setup.py" and 
	integrated into the ActionMap in "Components/ConfigList.py".

13)	The "setup_key" skin facility appears to be unused.  The name has 
	been changed to "Setup_key" to better match existing skin names.  
	This option allows skin designers to create custom "Setup" based 
	screens for any "Setup" menu item.

	The "setup.xml" file's "setup" tag also offers a "skin" attribute to 
	also allow for the screen for that menu to be specified.

	The order of screen selection is first look for a "skin" attribute 
	screen, then try for a "Setup_key" screen and finally use the 
	standard "Setup" screen.

14)	Rename the GREEN button text from "OK" to a more appropriate "Save".

15)	Perform a PEP8 clean-up of the code.

16)	Reorganise the imports and code blocks to improve readability of the 
	refactored code.

STRUCTURE OF "setup.xml" FILES:
===============================

Syntax:
	
	<setupxml>
		<setup key="Sample1" title="Sample1 settings">
			<item level="0" text="Configuration item 1" description="This is the description text that explains the purpose and settings of config item 1.">config_item1</item>
			<item level="0" text="Configuration item 2" description="This is the description text that explains the purpose and settings of config item 2.">config_item2</item>
		</setup>
		<setup key="Sample2" title="Sample2 settings">
			<item level="0" text="Configuration item 3" description="This is the description text that explains the purpose and settings of config item 3.">config_item3</item>
			<item level="1" text="Configuration item 4" description="This is the description text that explains the purpose and settings of config item 4.">config_item4</item>
		</setup>
	</setupxml>

The "setupxml" tag defines that the file is a setup configuration file. The 
"setupxml" tag has no attributes and should contain a list of one or more 
"setup" tag blocks. Each of the "setup" tag blocks should contain a list of 
one or more "item" blocks.  Each of the "item" tag blocks must contain a 
configuration element that has been defined in "Components/UsageConfig.py" 
or elsewhere.

Each of the "setup" tags can have the following attributes:

	Attribute	Required	Description
	---------	--------	-----------
	"key"		Mandatory	This attribute is the reference name, 
					or key, used to identify this Setup 
					menu.

	"title"		Mandatory	This attribute is the long form title 
					text used for the heading or title of 
					this setup menu screen.

	"menuTitle"	Optional	This attribute is the title that can 
					be used as an alternative for the 
					"title" in menus of Setup menu items.

	"skin"		Optional	This attribute is used to specify an 
					override screen name defined in the 
					skin to be used to display this Setup 
					screen.

Each of the "item" tags can have the following attributes:

	Attribute	Required	Description
	---------	--------	-----------
	"text"		Mandatory	This attribute is the prompt text 
					that is displayed to the user when 
					activating this Setup menu.

	"level"		Recommended	The list of items that may be 
					displayed in any Setup menu is 
					dynamic. This attribute determines 
					the user interface setup mode or 
					level where this option may be 
					displayed.  The default level, if 
					not specified, is 0.

				Level=0 -> Basic / Normal / Simple or higher
				Level=1 -> Advanced / Intermediate or higher
				Level=2 -> Expert

	"description"	Recommended	This attribute is the help prompt or 
					information that can, and should, be 
					used to offer guidance to users in 
					when and how to set the associated 
					configuration option.  If this is 
					omitted no assistance or information 
					will be offered to users.

	"conditional"	Optional	This attribute allows for programmed 
					logic to decide is this item is 
					eligible for display in the Setup 
					menu.

	"requires"	Optional	This attribute allows for "SystemInfo" 
					or "config" variables to be used to 
					enable display of the item.  If the 
					first character of the attribute 
					argument is "!" then the argument 
					logic is inverted.

	NOTE 1:	The text in the "text" and "description" attributes will 
		be processed by the language translation system.

	NOTE 2:	After the text in the "text" and "description" attributes 
		has been translated any occurrence of the string "%s %s" will 
		be replaced by the current make and model of the device upon 
		which the code is running.

	NOTE 3: If the last character of the "text" attribute is "*" then 
		when this item is currently selected by the user a footnote 
		message will appear to advise the user that a restart will be 
		required if this item is changed.

The payload or data element of the "item" tag should be the config element 
defined in "Components/UsageConfig.py", or elsewhere, to be managed / changed 
by the encompassing item tag.


"Screens/Setup.py" / "Setup" SCREEN VARIABLES:
==============================================

	Variable		Description
	--------		-----------
	menu_path_compressed	This variable uses a 
				source="menu_path_compressed" render=Label" 
				widget that provides the menu path to the 
				currently used "Setup" menu.  (This 
				information and is only defined for the 
				OpenViX and Beyonwiz builds.  It is 
				handled differently in OpenPLi.)

	title			This variable uses a name="title" widget 
				that provides the title of the "Setup" menu.

	config			This variable uses a name="config" widget 
				that provides the list of available "Setup" 
				configuration items.

	description		This variable uses a name="description" 
				widget that provides any available help or 
				description text for the currently selected 
				"Setup" item.

	footnote		This variable uses a name="footnote" widget 
				that provides a footnote message that 
				typically advises when changing the item's 
				value may trigger a restart.

	key_red			This variable uses a source="key_red" 
				render="Label" widget that provides the text 
				for the RED button.  This variable can also 
				be used to trigger an associated button 
				graphic.

	key_green		This variable uses a source="key_green" 
				render="Label" widget that provides the text 
				for the GREEN button.  This variable can also 
				be used to trigger an associated button 
				graphic.

	key_yellow		This variable uses a source="key_yellow" 
				render="Label" widget that provides the text 
				for the YELLOW button.  This variable can 
				also be used to trigger an associated button 
				graphic.  The YELLOW button is not used by 
				the core "Setup" class but may be used by 
				other code based on the "Setup" class.

	key_blue		This variable uses a source="key_blue" 
				render="Label" widget that provides the text 
				for the BLUE button.  This variable can also 
				be used to trigger an associated button 
				graphic.  The BLUE button is not used by 
				the core "Setup" class but may be used by 
				other code based on the "Setup" class.

	key_help		This variable uses a source="key_help" 
				render="Label" widget that provides a signal 
				to the skin to display the HELP button.

	VKeyIcon		This variable uses a source="VKeyIcon" 
				render="Pixmap" widget that provides a signal 
				to the skin to display the TEXT button when 
				appropriate.

	HelpWindow		This variable uses a name="HelpWindow" widget 
				that displays the SMS helper window overlay 
				when appropriate.

SAMPLE "Setup" SCREEN:
======================

	<screen name="Setup" title="Setup" position="center,center" size="1000,565">
		<widget source="menu_path_compressed" render="Label" position="560,0" size="440,15" conditional="menu_path_compressed" font="Regular;12" halign="right" transparent="1" />
		<widget source="Title" render="Label" position="560,15" size="440,25" font="Regular;20" halign="right" noWrap="1" transparent="1" />
		<widget source="key_red" render="Pixmap" pixmap="buttons/red.png" position="0,0" size="140,40" alphatest="blend" conditional="key_red">
			<convert type="ConditionalShowHide"/>
		</widget>
		<widget source="key_red" render="Label" position="0,0" size="140,40" backgroundColor="#9f1313" font="Regular;20" halign="center" transparent="1" valign="center" zPosition="+1" />
		<widget source="key_green" render="Pixmap" pixmap="buttons/green.png" position="140,0" size="140,40" alphatest="blend" conditional="key_green">
			<convert type="ConditionalShowHide"/>
		</widget>
		<widget source="key_green" render="Label" position="140,0" size="140,40" backgroundColor="#1f771f" font="Regular;20" halign="center" transparent="1" valign="center" zPosition="+1" />
		<widget source="key_yellow" render="Pixmap" pixmap="buttons/yellow.png" position="280,0" size="140,40" alphatest="blend" conditional="key_yellow">
			<convert type="ConditionalShowHide"/>
		</widget>
		<widget source="key_yellow" render="Label" position="280,0" size="140,40" backgroundColor="#a08500" font="Regular;20" halign="center" transparent="1" valign="center" zPosition="+1" />
		<widget source="key_blue" render="Pixmap" pixmap="buttons/blue.png" position="420,0" size="140,40" alphatest="blend" conditional="key_blue">
			<convert type="ConditionalShowHide"/>
		</widget>
		<widget source="key_blue" render="Label" position="420,0" size="140,40" backgroundColor="#141484" font="Regular;20" halign="center" transparent="1" valign="center" zPosition="+1" />
		<widget source="key_help" render="Pixmap" pixmap="buttons/key_help.png" position="0,540" size="35,25" alphatest="blend" transparent="1" />
		<widget source="VKeyIcon" render="Pixmap" pixmap="buttons/key_text.png" position="40,540" size="35,25" alphatest="blend" transparent="1">
			<convert type="ConditionalShowHide"/>
		</widget>
		<widget name="HelpWindow" pixmap="buttons/vkey_icon.png" position="0,250" size="1,1" zPosition="+1" />
		<widget name="menuimage" position="0,50" size="200,400" alphatest="blend" conditional="menuimage" transparent="1" />
		<widget name="config" position="200,50" size="800,400" enableWrapAround="1" scrollbarMode="showOnDemand" transparent="1" />
		<widget name="footnote" position="200,460" size="800,20" font="Regular;18" transparent="1" valign="center" />
		<widget name="description" position="200,490" size="800,75" font="Regular;20" transparent="1" valign="center" />
	</screen>

SKIN "Setups" SUPPORT BLOCK:
============================

Syntax:

	<setups>
		<setup key="default" image="setup_default.png" />
		<setup key="Sample1" image="setup_key.png" />
	</setups>

This block is optional but if defined allows a skin designer to associate 
an image with any "Screens/Setup.py" based menu.  The "setups" tag has no 
attributes and contains a list of "setup" tags.

Each "setup" tag must contain two attributes:

	key	This attribute is the value of the key attribute from a 
		setup.xml file.  If the keys match then this entry defines 
		an image that is to be used when the nominated Setup menu 
		is displayed.

	image	This attribute is the pathname of the image that is to be 
		associated with the Setup menu identified by the "key" 
		attribute.

There is a special "key" attribute with the name "default".  This entry, 
if defined, assigns a default image to be used in ALL "Screens/Setup.py" 
screens that do not have a specifically assigned image.

CONCLUSION:
===========

For all the Enigma2 builds there is a significant difference in facilities 
offered by the "Screens/Setup.py code.  This proposal outlines what I 
believe to be a conservative approach to making a significant and beneficial 
change in unifying and standardising the operation of "Setup" menus and 
screens across the Enigma2 UI.

---END---
